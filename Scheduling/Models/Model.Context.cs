//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Scheduling.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DBEntities : DbContext
    {
        public DBEntities()
            : base("name=DBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Academic> Academics { get; set; }
        public virtual DbSet<AccountType> AccountTypes { get; set; }
        public virtual DbSet<Class> Classes { get; set; }
        public virtual DbSet<ClassType> ClassTypes { get; set; }
        public virtual DbSet<course> courses { get; set; }
        public virtual DbSet<day> days { get; set; }
        public virtual DbSet<DEMO> DEMOes { get; set; }
        public virtual DbSet<Login> Logins { get; set; }
        public virtual DbSet<offeredcourse> offeredcourses { get; set; }
        public virtual DbSet<Program> Programs { get; set; }
        public virtual DbSet<Request> Requests { get; set; }
        public virtual DbSet<room> rooms { get; set; }
        public virtual DbSet<schedule> schedules { get; set; }
        public virtual DbSet<section> sections { get; set; }
        public virtual DbSet<sectiondetail> sectiondetails { get; set; }
        public virtual DbSet<Semester> Semesters { get; set; }
        public virtual DbSet<SemesterType> SemesterTypes { get; set; }
        public virtual DbSet<slot> slots { get; set; }
        public virtual DbSet<slottype> slottypes { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<teacher> teachers { get; set; }
        public virtual DbSet<WeekWise> WeekWises { get; set; }
        public virtual DbSet<vAvailable> vAvailables { get; set; }
        public virtual DbSet<voffcours> voffcourses { get; set; }
        public virtual DbSet<voffCoursesWithSectionsandTeacher> voffCoursesWithSectionsandTeachers { get; set; }
        public virtual DbSet<vschedule> vschedules { get; set; }
        public virtual DbSet<vsection> vsections { get; set; }
        public virtual DbSet<vslottype> vslottypes { get; set; }
    
        public virtual ObjectResult<CurrentClasses_Result> CurrentClasses(Nullable<int> dayid, Nullable<int> slottypeid, string currdate, string startdate, string enddate)
        {
            var dayidParameter = dayid.HasValue ?
                new ObjectParameter("dayid", dayid) :
                new ObjectParameter("dayid", typeof(int));
    
            var slottypeidParameter = slottypeid.HasValue ?
                new ObjectParameter("slottypeid", slottypeid) :
                new ObjectParameter("slottypeid", typeof(int));
    
            var currdateParameter = currdate != null ?
                new ObjectParameter("currdate", currdate) :
                new ObjectParameter("currdate", typeof(string));
    
            var startdateParameter = startdate != null ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(string));
    
            var enddateParameter = enddate != null ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CurrentClasses_Result>("CurrentClasses", dayidParameter, slottypeidParameter, currdateParameter, startdateParameter, enddateParameter);
        }
    
        public virtual ObjectResult<EmptyRooms_Result> EmptyRooms(Nullable<int> dayid, Nullable<int> slottypeid, string startdate, string enddate)
        {
            var dayidParameter = dayid.HasValue ?
                new ObjectParameter("dayid", dayid) :
                new ObjectParameter("dayid", typeof(int));
    
            var slottypeidParameter = slottypeid.HasValue ?
                new ObjectParameter("slottypeid", slottypeid) :
                new ObjectParameter("slottypeid", typeof(int));
    
            var startdateParameter = startdate != null ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(string));
    
            var enddateParameter = enddate != null ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmptyRooms_Result>("EmptyRooms", dayidParameter, slottypeidParameter, startdateParameter, enddateParameter);
        }
    
        public virtual ObjectResult<EmptyRoomsCountByDay_Result> EmptyRoomsCountByDay(string startdate, string enddate)
        {
            var startdateParameter = startdate != null ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(string));
    
            var enddateParameter = enddate != null ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmptyRoomsCountByDay_Result>("EmptyRoomsCountByDay", startdateParameter, enddateParameter);
        }
    
        public virtual ObjectResult<EmptyRoomsProc_Result> EmptyRoomsProc(Nullable<int> dayid, string campus, Nullable<int> slottypeid)
        {
            var dayidParameter = dayid.HasValue ?
                new ObjectParameter("dayid", dayid) :
                new ObjectParameter("dayid", typeof(int));
    
            var campusParameter = campus != null ?
                new ObjectParameter("campus", campus) :
                new ObjectParameter("campus", typeof(string));
    
            var slottypeidParameter = slottypeid.HasValue ?
                new ObjectParameter("slottypeid", slottypeid) :
                new ObjectParameter("slottypeid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmptyRoomsProc_Result>("EmptyRoomsProc", dayidParameter, campusParameter, slottypeidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetTeacherId(Nullable<int> offid, string startdate, string enddate)
        {
            var offidParameter = offid.HasValue ?
                new ObjectParameter("offid", offid) :
                new ObjectParameter("offid", typeof(int));
    
            var startdateParameter = startdate != null ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(string));
    
            var enddateParameter = enddate != null ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetTeacherId", offidParameter, startdateParameter, enddateParameter);
        }
    
        public virtual ObjectResult<MonitoringByOffId_Result> MonitoringByOffId(Nullable<int> offid)
        {
            var offidParameter = offid.HasValue ?
                new ObjectParameter("offid", offid) :
                new ObjectParameter("offid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MonitoringByOffId_Result>("MonitoringByOffId", offidParameter);
        }
    
        public virtual ObjectResult<PMEmptyRooms_Result> PMEmptyRooms(Nullable<int> dayid, Nullable<int> slottypeid, string startdate, string enddate)
        {
            var dayidParameter = dayid.HasValue ?
                new ObjectParameter("dayid", dayid) :
                new ObjectParameter("dayid", typeof(int));
    
            var slottypeidParameter = slottypeid.HasValue ?
                new ObjectParameter("slottypeid", slottypeid) :
                new ObjectParameter("slottypeid", typeof(int));
    
            var startdateParameter = startdate != null ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(string));
    
            var enddateParameter = enddate != null ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PMEmptyRooms_Result>("PMEmptyRooms", dayidParameter, slottypeidParameter, startdateParameter, enddateParameter);
        }
    }
}
